# The docker base image
# Work on TPL docker image pull-able from https://hub.docker.com/u/geosx
#
# Main Layout (eventually):
#               /opt
#                   |- GEOSX_TPL/
#                   |- GEOSX/
#
# install GEOSX in /opt/GEOSX with HYPRE ON (hardcoded)
# build-arg:
#   DOCKER_ROOT_IMAGE has to be chosen among different distro 

ARG DOCKER_ROOT_IMAGE
ARG GEOS_SRC_DIR=/tmp/geos-src

FROM ${DOCKER_ROOT_IMAGE} as tpl_toolchain_intersect_geosx_toolchain

ARG HOST_CONFIG=/spack-generated.cmake
ARG GEOS_TPL_DIR=/opt/GEOS/GEOS_TPL 
ARG GEOS_TPL_SRC=/tmp/thirdPartyLibs
ARG SPACK_SPEC="%gcc@12"



RUN apt-get -y update
RUN yes "y"|  apt-get install --fix-missing --reinstall ca-certificates
RUN DEBIAN_FRONTEND=noninteractive TZ=America/Los_Angeles apt-get install -y \
    make \
    flex \
    bison \
    python3 \
    python3-pip\
    zlib1g-dev\
    curl\
    git\
    git-lfs\
    gcc-12\
    g++-12\
    gfortran-12\
    libgfortran5 \
    libtbb2 \
    libblas-dev \
    liblapack-dev \
    zlib1g-dev \
    openmpi-bin \
    libopenmpi-dev \    
    python3-sphinx \
    doxygen \
    pkg-config \
    xz-utils \
    unzip \
    libmpfr-dev \
    lbzip2 \
    virtualenv


RUN python3 -m pip install --upgrade pip &&\
python3 -m pip install clingo

ARG CMAKE_VERSION=3.27.1
RUN curl -sL https://cmake.org/files/v${CMAKE_VERSION%.[0-9]*}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz | tar --directory=/usr/local --strip-components=1 -xzf -

RUN git clone https://github.com/GEOS-DEV/thirdPartyLibs.git ${GEOS_TPL_SRC}
WORKDIR ${GEOS_TPL_SRC}
RUN git submodule update --init scripts/uberenv

ENV SPACK_ENV=${GEOS_TPL_SRC}/docker/spack.yaml
ENV UBERENV_CONFIG=${GEOS_TPL_SRC}/.uberenv_config.json

RUN mkdir -p ${GEOS_TPL_DIR}
RUN ./scripts/uberenv/uberenv.py      --spec "${SPACK_SPEC}"        --spack-env-file=${SPACK_ENV}        --project-json=${UBERENV_CONFIG}        --prefix ${GEOS_TPL_DIR}   -k &&      rm lvarray* &&      cp *.cmake /spack-generated.cmake
#clean up install dir
WORKDIR ${GEOS_TPL_DIR}
RUN rm -rf bin/ build_stage/ misc_cache/ spack/ spack-env/ .spack-db/



FROM tpl_toolchain_intersect_geosx_toolchain AS geosx_toolchain

ARG HOST_CONFIG
COPY --from=tpl_toolchain_intersect_geosx_toolchain ${HOST_CONFIG} /

RUN apt-get -y install \
    texlive \
    graphviz \
    libxml2 

RUN python3 -m pip install numpy

ARG GEOS_SRC_DIR
ARG GEOS_BUILD_DIR=${GEOS_SRC_DIR}/build


RUN git clone https://github.com/GEOS-DEV/GEOS.git ${GEOS_SRC_DIR}
WORKDIR ${GEOS_SRC_DIR}
RUN git pull
RUN git submodule update --init src/cmake/blt
RUN	git submodule update --init src/coreComponents/LvArray 
RUN	git submodule update --init src/coreComponents/fileIO/coupling/hdf5_interface 
RUN	git submodule update --init src/coreComponents/constitutive/PVTPackage

RUN git submodule update

ENV ENABLE_HYPRE=ON
ENV ENABLE_CUDA=OFF
ENV ENABLE_PYGEOSX=OFF
ENV ENABLE_TEST=OFF
#--hostconfig=${HOST_CONFIG}
RUN python3 scripts/config-build.py --hostconfig=${HOST_CONFIG} --buildtype=Release --buildpath=${GEOS_BUILD_DIR} --installpath=/opt/GEOSX/GEOSX-version
WORKDIR ${GEOS_BUILD_DIR}
RUN make -j 8 geosx && make install
#
RUN mv ${GEOS_SRC_DIR}/inputFiles/ /opt/GEOSX/
RUN rm -rf /tmp/src
#
ENTRYPOINT ${GEOS_BUILD_DIR}/bin/geosx
CMD ["-i","case.xml","-x","2","-y","1","-z","1"]


